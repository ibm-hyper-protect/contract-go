name: contract-go CI

on:
  push:
    branches:
      - main

  pull_request:

  workflow_dispatch:
    inputs:
      dryRun:
        description: 'Dry-Run'
        default: 'true'
        required: false

env:
  # Currently no way to detect automatically
  DEFAULT_BRANCH: main
  GO_VERSION: 1.22.4 # renovate: datasource=golang-version depName=golang
  NODE_VERSION: 20

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.22.x']
    steps:
      # full checkout for semantic-release
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run Tests
        run: |
          make tidy
          make test

  release:
    needs: build
    if: github.repository == 'ibm-hyper-protect/contract-go' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install cyclonedx-gomod
        run: |
          go install github.com/CycloneDX/cyclonedx-gomod/cmd/cyclonedx-gomod@latest
          echo "$HOME/go/bin" >> $GITHUB_PATH

      - name: Determine dry run mode
        id: dry_run
        run: |
          dry_run=true
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.dryRun }}" != "true" ]]; then
            dry_run=false
          elif [[ "${{ github.ref }}" == "refs/heads/${{ env.DEFAULT_BRANCH }}" ]]; then
            dry_run=false
          elif [[ "${{ github.ref }}" =~ ^refs/heads/v[0-9]+(\.[0-9]+)?$ ]]; then
            dry_run=false
          fi
          echo "dry_run=$dry_run" >> $GITHUB_OUTPUT

      - name: Semantic Release
        run: |
          npx -p @semantic-release/changelog \
              -p @semantic-release/git \
              -p @semantic-release/github \
              -p conventional-changelog-conventionalcommits \
              -p semantic-release \
              semantic-release --dry-run ${{ steps.dry_run.outputs.dry_run }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get latest Git tag
        id: get_tag
        if: steps.dry_run.outputs.dry_run == 'false'
        run: |
          tag=$(git describe --tags --abbrev=0)
          echo "tag=$tag" >> $GITHUB_OUTPUT

      - name: Generate SBOM
        id: generate_sbom
        if: steps.dry_run.outputs.dry_run == 'false'
        run: |
          sbom_file="contract-go-${{ steps.get_tag.outputs.tag }}.sbom.json"
          cyclonedx-gomod mod -licenses -json -output "$sbom_file"
          echo "sbom_file=$sbom_file" >> $GITHUB_OUTPUT

      - name: Upload SBOM to GitHub Release
        if: steps.dry_run.outputs.dry_run == 'false'
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.generate_sbom.outputs.sbom_file }}
          tag_name: ${{ steps.get_tag.outputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
